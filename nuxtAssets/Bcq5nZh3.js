var k=Object.defineProperty;var E=(a,e,n)=>e in a?k(a,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):a[e]=n;var l=(a,e,n)=>E(a,typeof e!="symbol"?e+"":e,n);import{U as I,W as c,I as O,ae as T,Y as p,a5 as R,T as F,ac as B,af as x,ag as $,ah as q}from"./BftIUcDm.js";class P{constructor(e){l(this,"id");l(this,"name");l(this,"db");this.name=e}setDB(e){this.db=e}async get_match_count(){return await this.db.match.where("team1ID").equals(this.id).or("team2ID").equals(this.id).count()}async get_match_wins(){let e=await this.db.innings.where("battingTeamID").equals(this.id).and(i=>i.target!=-1&&i.runs>=i.target).count(),n=await this.db.innings.where("bowlingTeamID").equals(this.id).and(i=>(i.balls>=i.max_balls||i.target!=-1&&i.runs>=i.target||i.id_YetToBat.length==0&&(i.id_striker==-1||i.id_non_striker==-1))&&i.target!=-1&&i.runs<i.target-1).count();return e+n}async get_match_losses(){let e=await this.db.innings.where("bowlingTeamID").equals(this.id).and(i=>i.target!=-1&&i.runs>=i.target).count(),n=await this.db.innings.where("battingTeamID").equals(this.id).and(i=>(i.balls>=i.max_balls||i.target!=-1&&i.runs>=i.target||i.id_YetToBat.length==0&&(i.id_striker==-1||i.id_non_striker==-1))&&i.target!=-1&&i.runs<i.target-1).count();return e+n}async get_highest_score(){let e=await this.db.innings.where("battingTeamID").equals(this.id).sortBy("runs");if(e.length==0)return;let n=e[e.length-1],i=await this.db.match.where("id_FirstInning").equals(n.id).or("id_SecondInning").equals(n.id).first();if(!i)throw new Error("Team get: no match exists for inning");let s=await this.db.team.get(n.bowlingTeamID);return{runs:n.runs,wickets:n.wickets,matchID:i.id,opponent:s==null?void 0:s.name}}async get_lowest_score(){let e=await this.db.innings.where("battingTeamID").equals(this.id).and(t=>(t.balls>=t.max_balls||t.target!=-1&&t.runs>=t.target||t.id_YetToBat.length==0&&(t.id_striker==-1||t.id_non_striker==-1))&&(t.target==-1||t.runs<t.target)).sortBy("runs");if(e.length==0)return;let n=e[0],i=await this.db.match.where("id_FirstInning").equals(n.id).or("id_SecondInning").equals(n.id).first();if(!i)throw new Error("Team get: no match exists for inning");let s=await this.db.team.get(n.bowlingTeamID);return{runs:n.runs,wickets:n.wickets,matchID:i.id,opponent:s==null?void 0:s.name}}async biggest_win_by_runs(){let e=await this.db.innings.where("bowlingTeamID").equals(this.id).and(t=>(t.balls>=t.max_balls||t.target!=-1&&t.runs>=t.target||t.id_YetToBat.length==0&&(t.id_striker==-1||t.id_non_striker==-1))&&t.target!=-1&&t.runs<t.target-1).toArray();if(e.sort((t,r)=>r.target-r.runs-(t.target-t.runs)),e.length==0)return;let n=e[0],i=await this.db.match.where("id_FirstInning").equals(n.id).or("id_SecondInning").equals(n.id).first();if(!i)throw new Error("Team get: no match exists for inning");let s=await this.db.team.get(n.battingTeamID);return{diff:n.target-n.runs-1,matchID:i.id,opponent:s==null?void 0:s.name}}async biggest_win_by_wickets(){let e=await this.db.innings.where("battingTeamID").equals(this.id).and(t=>(t.balls>=t.max_balls||t.target!=-1&&t.runs>=t.target||t.id_YetToBat.length==0&&(t.id_striker==-1||t.id_non_striker==-1))&&t.target!=-1&&t.runs>=t.target).toArray();if(e.sort((t,r)=>r.wickets_left-t.wickets_left),e.length==0)return;let n=e[0],i=await this.db.match.where("id_FirstInning").equals(n.id).or("id_SecondInning").equals(n.id).first();if(!i)throw new Error("Team get: no match exists for inning");let s=await this.db.team.get(n.bowlingTeamID);return{wickets:n.wickets_left,matchID:i.id,opponent:s==null?void 0:s.name}}async highest_runs_chased(){let e=await this.db.innings.where("battingTeamID").equals(this.id).and(t=>(t.balls>=t.max_balls||t.target!=-1&&t.runs>=t.target||t.id_YetToBat.length==0&&(t.id_striker==-1||t.id_non_striker==-1))&&t.target!=-1&&t.runs>=t.target).sortBy("runs");if(e.length==0)return;let n=e[e.length-1],i=await this.db.match.where("id_FirstInning").equals(n.id).or("id_SecondInning").equals(n.id).first();if(!i)throw new Error("Team get: no match exists for inning");let s=await this.db.team.get(n.bowlingTeamID);return{runs:n.runs,wickets:n.wickets,matchID:i.id,opponent:s==null?void 0:s.name}}async lowest_runs_defended(){let e=await this.db.innings.where("bowlingTeamID").equals(this.id).and(t=>(t.balls>=t.max_balls||t.target!=-1&&t.runs>=t.target||t.id_YetToBat.length==0&&(t.id_striker==-1||t.id_non_striker==-1))&&t.target!=-1&&t.runs<t.target-1).sortBy("target");if(e.length==0)return;let n=e[0],i=await this.db.match.where("id_FirstInning").equals(n.id).or("id_SecondInning").equals(n.id).first();if(!i)throw new Error("Team get: no match exists for inning");let s=await this.db.team.get(n.battingTeamID);return{target:n.target,matchID:i.id,opponent:s==null?void 0:s.name}}}function S(a){return Math.floor(a/6)+"."+a%6}async function W(a){var t;let e=0,n=0,i=0,s=[];for(let r of a.balls_action)r&&(e+=r.total_runs,r.legal?n++:e++,r.wicket!=c.NONE&&(i++,s.push({runs:e,wickets:i,balls:n,playerID:(t=await D.player_batting_inning.where({outOnBall:r.id}).first())==null?void 0:t.playerID})));return s}async function Y(a){var _,b,m,w,f,y,g;let e={id:-1,runs:0,balls:0},n={id:-1,runs:0,balls:0},i=0,s=0,t=()=>{let d=e;e=n,n=d},r=[];for(let d=0;d<a.actions.length;d++){if(((_=a.actions[d])==null?void 0:_.type)==I.NEW_BATTER&&(e.id==-1?e.id=(m=await D.player_batting_inning.get((b=a.actions[d])==null?void 0:b.relatedID))==null?void 0:m.playerID:n.id=(f=await D.player_batting_inning.get((w=a.actions[d])==null?void 0:w.relatedID))==null?void 0:f.playerID),((y=a.actions[d])==null?void 0:y.type)==I.NEW_BALL){let o=a.balls_action[d];i+=o.runs_by_running+o.boundary,o.legal?s++:i++,o.wide||e.balls++,o.hit_by==O.BAT&&(e.runs+=o.runs_by_running+o.boundary),o.wicket!=c.NONE&&(r.push({runs:structuredClone(i),balls:structuredClone(s),player1:structuredClone(e),player2:structuredClone(n)}),e.runs=0,e.balls=0,n.runs=0,n.balls=0,i=0,s=0),[c.NONE,c.RUN_OUT_NON_STRIKER_ON_STRIKER_END,c.RUN_OUT_NON_STRIKER_ON_NON_STRIKER_END].includes(o.wicket)||(e={id:-1,runs:0,balls:0}),(o.wicket==c.RUN_OUT_NON_STRIKER_ON_STRIKER_END||o.wicket==c.RUN_OUT_NON_STRIKER_ON_NON_STRIKER_END)&&(n={id:-1,runs:0,balls:0}),o.runs_by_running%2==1&&t(),[c.CAUGHT_AND_BATSMEN_CROSSED,c.RUN_OUT_STRIKER_ON_NON_STRIKER_END,c.RUN_OUT_NON_STRIKER_ON_STRIKER_END].includes(o.wicket)&&t()}((g=a.actions[d])==null?void 0:g.type)==I.END_OF_OVER&&t()}return e.id!=-1&&n.id!=-1&&r.push({runs:i,balls:s,player1:structuredClone(e),player2:structuredClone(n)}),r}async function G(a){var b,m,w,f,y,g,d,o,N;let e=[],n=-1,i=-1,s=-1,t=-1,r={bowler:-1,batters:[],balls:[]},_=[];for(let u=0;u<a.actions.length;u++){if(((b=a.actions[u])==null?void 0:b.type)==I.NEW_BATTER){let h=await D.player_batting_inning.get((m=a.actions[u])==null?void 0:m.relatedID);n==-1?(n=h==null?void 0:h.playerID,s=h==null?void 0:h.outOnBall):(i=h==null?void 0:h.playerID,t=h==null?void 0:h.outOnBall),r.batters.push(h==null?void 0:h.playerID)}if(((w=a.actions[u])==null?void 0:w.type)==I.NEW_BOWLER&&(r.bowler=(y=await D.player_bowling_inning.get((f=a.actions[u])==null?void 0:f.relatedID))==null?void 0:y.playerID),((g=a.actions[u])==null?void 0:g.type)==I.NEW_BALL&&(_.push(a.balls_action[u]),((d=a.balls_action[u])==null?void 0:d.id)==s&&(n=-1,s=-1),((o=a.balls_action[u])==null?void 0:o.id)==t&&(i=-1,t=-1)),((N=a.actions[u])==null?void 0:N.type)==I.END_OF_OVER){e.push(structuredClone(r));for(let h of _)e[e.length-1].balls.push(h);_=[],r={bowler:-1,batters:[],balls:[]},n!=-1&&r.batters.push(n),i!=-1&&r.batters.push(i)}}if(_.length!=0){e.push(structuredClone(r));for(let u of _)e[e.length-1].balls.push(u)}return e}var v=(a=>(a[a.NOT_STARTED=0]="NOT_STARTED",a[a.FIRST_INNING=1]="FIRST_INNING",a[a.BREAK=2]="BREAK",a[a.SECOND_INNING=3]="SECOND_INNING",a[a.COMPLETED=4]="COMPLETED",a))(v||{});class C{constructor(e,n,i,s,t,r,_){l(this,"db");l(this,"id");l(this,"team1ID");l(this,"team2ID");l(this,"team1");l(this,"team2");l(this,"max_balls");l(this,"team1PlayerIDs");l(this,"team2PlayerIDs");l(this,"team1Players");l(this,"team2Players");l(this,"tossWonBy1");l(this,"knockout");l(this,"id_FirstInning",-1);l(this,"id_SecondInning",-1);l(this,"FirstInning");l(this,"SecondInning");this.team1ID=e,this.team2ID=n,this.max_balls=i,this.team1PlayerIDs=s,this.team2PlayerIDs=t,this.tossWonBy1=r,this.knockout=_}get Status(){return this.FirstInning==null?0:this.FirstInning.required_action()!=I.END_OF_INNING?1:this.SecondInning==null?2:this.SecondInning.required_action()!=I.END_OF_INNING?3:4}async load_data(e){var n,i;this.db=e,this.team1=await this.db.team.get(this.team1ID),this.team2=await this.db.team.get(this.team2ID),this.id_FirstInning!=-1?(this.FirstInning=await this.db.innings.get(this.id_FirstInning),await((n=this.FirstInning)==null?void 0:n.load_data(this.db))):this.FirstInning=void 0,this.id_SecondInning!=-1?(this.SecondInning=await this.db.innings.get(this.id_SecondInning),await((i=this.SecondInning)==null?void 0:i.load_data(this.db))):this.SecondInning=void 0,this.team1Players=await this.db.player.where("id").anyOf(this.team1PlayerIDs).toArray(),this.team2Players=await this.db.player.where("id").anyOf(this.team2PlayerIDs).toArray()}player_by_id(e){var i,s;let n=(i=this.team1Players)==null?void 0:i.find(t=>t.id==e);return n||((s=this.team2Players)==null?void 0:s.find(t=>t.id==e))}get current_inning(){if(this.Status==1)return this.FirstInning;if(this.Status==3)return this.SecondInning}get latest_inning(){return this.SecondInning?this.SecondInning:this.FirstInning}async push(){var e;if(this.Status==0){this.id_FirstInning=await this.db.innings.add(new T(this.team1ID,this.team2ID,this.max_balls,this.team1PlayerIDs,this.team2PlayerIDs)),await this.db.match.update(this.id,{id_FirstInning:this.id_FirstInning}),await this.load_data(this.db);return}if(this.Status==2){this.id_SecondInning=await this.db.innings.add(new T(this.team2ID,this.team1ID,this.max_balls,this.team2PlayerIDs,this.team1PlayerIDs,((e=this.FirstInning)==null?void 0:e.runs)+1)),await this.db.match.update(this.id,{id_SecondInning:this.id_SecondInning}),await this.load_data(this.db);return}throw p.match_error_invalid_status}async undo(){var e,n,i,s;if(this.Status==0)throw p.invalid_action;if(this.Status==1||this.Status==2){if(((e=this.FirstInning)==null?void 0:e.actions.length)==0){await this.db.innings.delete(this.FirstInning.id),await this.db.match.update(this.id,{id_FirstInning:-1}),this.id_FirstInning=-1,await this.load_data(this.db);return}await((n=this.FirstInning)==null?void 0:n.undo_last_action());return}if(((i=this.SecondInning)==null?void 0:i.actions.length)==0){await this.db.innings.delete(this.SecondInning.id),await this.db.match.update(this.id,{id_SecondInning:-1}),this.id_SecondInning=-1,await this.load_data(this.db);return}await((s=this.SecondInning)==null?void 0:s.undo_last_action())}get StatusMessage(){var e,n,i,s,t,r,_,b,m,w,f,y;if(this.Status==0||this.Status==1)return this.tossWonBy1?`${(e=this.team1)==null?void 0:e.name} won the toss and elected to bat first`:`${(n=this.team2)==null?void 0:n.name} won the toss and elected to bowl first`;if(this.Status==2)return this.max_balls<30?`${(i=this.team2)==null?void 0:i.name} needs ${((s=this.FirstInning)==null?void 0:s.runs)+1} run${((t=this.FirstInning)==null?void 0:t.runs)+1==1?"":"s"} in ${this.max_balls} ball${this.max_balls==1?"":"s"}`:`${(r=this.team2)==null?void 0:r.name} needs ${((_=this.FirstInning)==null?void 0:_.runs)+1} run${((b=this.FirstInning)==null?void 0:b.runs)+1==1?"":"s"} in ${S(this.max_balls)} over${this.max_balls==6?"":"s"}`;if(this.Status==3){let g=this.SecondInning.target-this.SecondInning.runs,d=this.SecondInning.max_balls-this.SecondInning.balls;return d<30?`${(m=this.team2)==null?void 0:m.name} needs ${g} run${g==1?"":"s"} in ${d} ball${d==1?"":"s"}`:`${(w=this.team2)==null?void 0:w.name} needs ${g} run${g==1?"":"s"} in ${S(d)} over${d==6?"":"s"}`}else{let g=this.SecondInning.target-this.SecondInning.runs-1,d=this.SecondInning.wickets_left;return g==0?"Match tied":g<0?`${(f=this.team2)==null?void 0:f.name} won by ${d} wicket${d==1?"":"s"}`:`${(y=this.team1)==null?void 0:y.name} won by ${g} run${g==1?"":"s"}`}}get Winner(){if(this.Status==4&&this.SecondInning.runs!=this.SecondInning.target-1)return this.SecondInning.runs>=this.SecondInning.target?this.team2ID:this.team1ID}async delete_self(){this.SecondInning&&await this.SecondInning.delete_self(),this.FirstInning&&await this.FirstInning.delete_self(),await this.db.match.delete(this.id)}}class A extends R{constructor(){super("crkDB");l(this,"balls");l(this,"player");l(this,"team");l(this,"player_batting_inning");l(this,"player_bowling_inning");l(this,"innings");l(this,"actions");l(this,"match");this.version(1).stores({balls:"++id, runs_by_running, boundary, batterID, bowlerID, hit_by, wide, no_ball, wicket, helperID",player:"++id, name, teamID, order, matches",team:"++id, name",player_batting_inning:"++id, playerID, inningID, runs, balls, fours, sixes, outOnBall",player_bowling_inning:"++id, playerID, inningID, balls, runs, wickets, wides, no_balls",innings:"++id, battingTeamID, bowlingTeamID, max_balls, target, runs, balls, wickets, wides, no_balls, leg_byes, byes, fours, sixes, id_YetToBat, id_YetToBowl, id_striker, id_non_striker, id_bowler, id_last_bowler",actions:"++id, inningID, type, relatedID, addInfo",match:"++id, team1ID, team2ID, max_balls, team1PlayerIDs, team2PlayerIDs, tossWonBy1, knockout, id_FirstInning, id_SecondInning"}),this.balls.mapToClass(F),this.player.mapToClass(B),this.team.mapToClass(P),this.player_batting_inning.mapToClass(x),this.player_bowling_inning.mapToClass($),this.innings.mapToClass(T),this.actions.mapToClass(q),this.match.mapToClass(C)}}const D=new A;export{D,v as M,P as T,C as a,S as b,Y as c,G as e,W as f};
